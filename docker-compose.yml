version: '3.9'
services:
  # PostgreSQL Database
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Docker-in-Docker
  dind:
    build:
      context: ./dind
      dockerfile: Dockerfile
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""
    networks:
      - app-network
    expose:
      - "2375"
    # NOTE: Ideally do NOT expose 2375 on host in production, it's insecure
    ports:
      - "2375:2375"
    volumes:
      - dind_data:/var/lib/docker

  # Django Backend
  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
        DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
        DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
        DJANGO_SECRET: ${DJANGO_SECRET}
    volumes:
      - ./backend:/app
    environment:
      DEBUG: 1
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DOCKER_HOST: "tcp://dind:2375"
    depends_on:
      - db
      - dind
    ports:
      - "8000:8000"
    networks:
      - app-network
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py createsuperuser --no-input || true &&
            python manage.py runserver 0.0.0.0:8000"
    labels:
      - "traefik.enable=true"
      # Route all /api requests to django
      - "traefik.http.routers.django.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls=true"
      # This sets the internal service port
      - "traefik.http.services.django.loadbalancer.server.port=8000"

  # Next Frontend
  next:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
    environment:
      DEBUG: 1
      API_URL: http://django:8000/api/
    networks:
      - app-network
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      # Root path goes to next (e.g., `https://yourdomain.com/`)
      - "traefik.http.routers.next.rule=Host(`localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.next.entrypoints=websecure"
      - "traefik.http.routers.next.tls=true"
      - "traefik.http.services.next.loadbalancer.server.port=3000"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.9
    command:
      - "--configFile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - app-network

  # Optional: If you still want NGINX inside network, remove host ports
  # and let Traefik route to it. But this is unnecessary if Next + Django
  # suffice. If you do keep it, add labels for Traefik routing:
  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/certificates:/etc/ssl/certs
  #     - ./frontend/build:/usr/share/nginx/html
  #   networks:
  #     - app-network
  #   expose:
  #     - "443"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.nginx.rule=Host(`yourdomain.com`)"
  #     - "traefik.http.routers.nginx.entrypoints=websecure"
  #     - "traefik.http.routers.nginx.tls=true"
  #     - "traefik.http.services.nginx.loadbalancer.server.port=443"


volumes:
  postgres_data:
  dind_data:

networks:
  app-network:
    driver: bridge
